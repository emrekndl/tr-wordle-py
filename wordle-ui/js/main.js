const API_BASE = "http://localhost:8000/api/wordle";

document.addEventListener("DOMContentLoaded", function() {
  // Global deÄŸiÅŸkenler
  let currentRow = 0;
  let currentSquareIndex = 0;
  const maxRows = 6;    // Toplam satÄ±r sayÄ±sÄ±
  const maxSquares = 5; // Her satÄ±rdaki kare sayÄ±sÄ±
  
  const rows = document.querySelectorAll(".grid .row");
  const keyButtons = document.querySelectorAll(".key");

  // Sayfa yÃ¼klendiÄŸinde gÃ¼nÃ¼n kelimesini Ã§ekmek (fetchWordOfTheDay fonksiyonunu burada da kullanabilirsiniz)
  fetchWordOfTheDay();
  loadGameState(); // Oyun state'ini yÃ¼kle

  // Klavye butonlarÄ±na tÄ±klama olaylarÄ±
  keyButtons.forEach(keyButton => {
    keyButton.addEventListener("click", function() {
      const key = this.textContent.trim();

      if (key === "Enter") {
        if (currentSquareIndex === maxSquares) {
          const guess = getCurrentGuess();
          // Tahmini API'ye gÃ¶nderiyoruz
          checkGuess(guess).then(response => {
            saveGameState(); // Oyun state'ini kaydet
            // API'den dÃ¶nen sonucu flip animasyonu ve renklendirme ile uygula
            animateRow(currentRow, response);
             // is_complete kontrolÃ¼
            if (response.is_complete === true) {
              // Modal gÃ¶ster
              showCompleteModal(response);  // GÃ¼nÃ¼n kelimesi gibi bir bilgi varsa bu fonksiyona gÃ¶nderilebilir

              // ArtÄ±k yeni tahmin gÃ¶nderilemesin veya klavye pasif olsun
              disableKeyboard();
            }
            // EÄŸer hala satÄ±r varsa, bir sonraki satÄ±ra geÃ§
            else if (currentRow < maxRows - 1) {
              currentRow++;
              currentSquareIndex = 0;
            } else {
              alert("Oyununuz tamamlandÄ±.");
            }
          });
        } else {
          alert("LÃ¼tfen 5 harften oluÅŸan bir kelime girin!");
        }
      } else if (key === "âŒ«") {
        // Geri silme: EÄŸer en az bir harf varsa, son harfi sil
        if (currentSquareIndex > 0) {
          currentSquareIndex--;
          const currentSquare = rows[currentRow].querySelectorAll(".square")[currentSquareIndex];
          currentSquare.textContent = "";
        }
      } else {
        // Harf tuÅŸlarÄ±na basÄ±ldÄ±ÄŸÄ±nda
        if (currentSquareIndex < maxSquares) {
          const currentSquare = rows[currentRow].querySelectorAll(".square")[currentSquareIndex];
          currentSquare.textContent = key;
          // Basit pop efektini tetikle
          currentSquare.classList.add("pop");
          setTimeout(() => {
            currentSquare.classList.remove("pop");
          }, 200);
          currentSquareIndex++;
        }
      }
    });
  });

  function showCompleteModal(response) {
    const modal = document.getElementById("completeModal");
    modal.style.display = "block";
  
    // Modal iÃ§eriÄŸinde "gÃ¼nÃ¼n kelimesi" var mÄ± yok mu gibi bilgileri de
    // responseâ€™tan alÄ±p gÃ¶sterebilirsiniz.
  }
  
  function closeModal() {
    document.getElementById("completeModal").style.display = "none";
  }
  
  // Yeni tahmin veya harf giriÅŸi engelleme
  function disableKeyboard() {
    // TÃ¼m key butonlarÄ±nÄ± pasif yapabilirsiniz
    document.querySelectorAll(".key").forEach(key => {
      key.disabled = true; 
    });
  }
  // GeÃ§erli satÄ±rdaki tahmini string olarak dÃ¶ndÃ¼ren fonksiyon
  function getCurrentGuess() {
    let guess = "";
    const squares = rows[currentRow].querySelectorAll(".square");
    squares.forEach(square => {
      guess += square.textContent;
    });
    return guess;
  }

  // APIâ€™ye tahmin gÃ¶nderip response dÃ¶ndÃ¼ren fonksiyon (POST isteÄŸi)
  async function checkGuess(guessWord) {
    try {
      const response = await fetch("/api/wordle/check", {
        method: "POST",
        credentials: "include",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ guess_word: guessWord })
      });
      if (!response.ok) {
        throw new Error("API hatasÄ±: " + response.statusText);
      }
      return await response.json();
    } catch (error) {
      console.error("Tahmin gÃ¶nderilirken hata oluÅŸtu:", error);
    }
  }

  // API'den dÃ¶nen response verileriyle aktif satÄ±rdaki kareleri flip animasyonu ve renklendirme ile gÃ¼ncelleyen fonksiyon
  function animateRow(rowIndex, result) {
    const row = rows[rowIndex];
    const squares = row.querySelectorAll(".square");
    squares.forEach((square, index) => {
      // Her bir kareye delay veriyoruz (Ã¶rneÄŸin, 300ms arayla)
      setTimeout(() => {
        square.classList.add("flip");
        // Harfin rengini belirle (basit bir kontrol, harfin hangi listede yer aldÄ±ÄŸÄ±nÄ± kontrol ediyoruz)
        const letter = square.textContent;
        // NOT: AynÄ± harf birden fazla kez gelebilir; burada basit kontrol yapÄ±yoruz.
        if (result.correct_letters.hasOwnProperty(index.toString()) && letter === result.correct_letters[index.toString()]) {
          square.classList.add("correct");
          updateKeyboardColor(letter, "correct");
        }
        // YanlÄ±ÅŸ konumda doÄŸru harf kontrolÃ¼:
        else if (result.correct_letters_in_not_correct_position.indexOf(letter) > -1) {
          // Bulunan harfin indeksini alÄ±p, diziden Ã§Ä±karÄ±yoruz.
          const misplacedIndex = result.correct_letters_in_not_correct_position.indexOf(letter);
          result.correct_letters_in_not_correct_position.splice(misplacedIndex, 1);
          square.classList.add("misplaced");
          // updateKeyboardColor(letter, "misplaced");
      } else if (result.incorrect_letters.includes(letter)) {
          square.classList.add("incorrect");
          updateKeyboardColor(letter, "incorrect");
        }
      }, index * 300);
    });
  }

  // GÃ¼nÃ¼n kelimesini Ã§eken fonksiyon (Ã¶rnek, UI'da kullanÄ±labilir)
  function fetchWordOfTheDay() {
    fetch("/api/wordle/wordoftheday", {
      method: "GET",
      credentials: "include"
    })
    .then(response => response.json())
    .then(data => {
      console.log("GÃ¼nÃ¼n kelimesi:", data.word);
      // EÄŸer istenirse, gÃ¼nÃ¼n kelimesi UI Ã¼zerinde farklÄ± bir alanda gÃ¶sterilebilir.
    })
    .catch(err => console.error("GÃ¼nÃ¼n kelimesi alÄ±namadÄ±:", err));
  }
  
  // Klavyedeki tuÅŸu renklendiren yardÄ±mcÄ± fonksiyon
  function updateKeyboardColor(letter, statusClass) {
    // Harfi bÃ¼yÃ¼k/kÃ¼Ã§Ã¼k harf farkÄ± yoksa ikisini de handle edebilirsiniz.
    // AÅŸaÄŸÄ±da bÃ¼yÃ¼k harfli tuÅŸ metninin olduÄŸunu varsayalÄ±m:
    const keyButton = Array.from(document.querySelectorAll(".key")).find(btn => btn.textContent.trim() === letter);

    if (keyButton) {
      // Ã–rneÄŸin, keyButton Ã¼zerinde eklenmiÅŸ .correct, .misplaced, .incorrect sÄ±nÄ±flarÄ±ndan birini temizleyip
      // yenisini ekleyebilirsiniz. (Basit yaklaÅŸÄ±mla Ã¶nce hepsini remove, sonra ekle)
      keyButton.classList.remove("correct", "misplaced", "incorrect");
      keyButton.classList.add(statusClass);
    }
  }

  // Oyun state'ini saklayan/okuyan fonksiyonlar
  function saveGameState() {
    // TÃ¼m satÄ±rlarÄ± gezerek her satÄ±rÄ±n durumunu alÄ±yoruz
    const rowsData = Array.from(rows).map(row => {
      // Her satÄ±rdaki karelerin harf bilgisini ve class listesini saklÄ±yoruz.
      return Array.from(row.querySelectorAll(".square")).map(sq => {
        return { 
          letter: sq.textContent,
          // classList nesnesi array'e Ã§evriliyor (Ã¶rneÄŸin: ["flip", "correct"] gibi)
          classes: Array.from(sq.classList)
        };
      });
    });
  
    const gameState = {
      currentRow,
      currentSquareIndex,
      rowsData,
      isComplete: false,
      puzzleId: new Date(),
      updatedAt: new Date().toISOString() 
    };
  
    localStorage.setItem("wordleGameState", JSON.stringify(gameState));
  }

  function loadGameState() {
    const savedState = localStorage.getItem("wordleGameState");
    if (savedState) {
      const gameState = JSON.parse(savedState);
      currentRow = gameState.currentRow;
      currentSquareIndex = gameState.currentSquareIndex;
  
      // Her satÄ±rdaki karelerin durumunu geri yÃ¼kle
      gameState.rowsData.forEach((rowCells, rowIndex) => {
        rowCells.forEach((cell, cellIndex) => {
          const square = rows[rowIndex].querySelectorAll(".square")[cellIndex];
          square.textContent = cell.letter;
          // Ã–nce mevcut classâ€™larÄ± temizleyip varsayÄ±lan "square" class'Ä±nÄ± ekliyoruz
          square.className = "square";
          // cell.classes tanÄ±mlÄ± deÄŸilse boÅŸ bir dizi dÃ¶ndÃ¼r
          const cellClasses = cell.classes || [];
          cellClasses.forEach(cls => {
            if (cls !== "square") {
              square.classList.add(cls);
            }
          });
        });
      });
  
      // EÄŸer oyun tamamlanmÄ±ÅŸsa, klavyeyi pasif hale getiriyoruz
      if (gameState.isComplete) {
        showCompleteModal();
        disableKeyboard();
      }
    }
  }
  
document.getElementById("closeModal").addEventListener("click", function() {
  closeModal();
}
);


document.getElementById("shareButton").addEventListener("click", function() {
  let shareText = `Wordle TÃ¼rkÃ§e ${new Date()} ${currentRow}/${maxRows}\n\n`;

  for (let r = 0; r <= currentRow; r++) {
    const squares = rows[r].querySelectorAll(".square");
    let rowEmoji = "";
    squares.forEach(sq => {
      if (sq.classList.contains("correct")) {
        rowEmoji += "ğŸŸ©";
      } else if (sq.classList.contains("misplaced")) {
        rowEmoji += "ğŸŸ¨";
      } else {
        rowEmoji += "â¬›";
      }
    });
    shareText += rowEmoji + "\n";
  }

  shareText += "\nhttps://wordle-tanÄ±malo-hekat.com/\n";

  copyToClipboard(shareText);

  alert("SonuÃ§ panoya kopyalandÄ±!");
});

function copyToClipboard(text) {
  // Modern tarayÄ±cÄ±larda (HTTPS altÄ±nda) kullanÄ±labilen bir yol:
  navigator.clipboard.writeText(text).then(() => {
    console.log("KopyalandÄ±!");
  }).catch(err => {
    console.error("Kopyalama hatasÄ±:", err);
  });
}

});




